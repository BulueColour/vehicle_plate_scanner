import 'dart:io';
import 'package:flutter/material.dart';
import 'package:google_mlkit_text_recognition/google_mlkit_text_recognition.dart';
import 'package:google_mlkit_object_detection/google_mlkit_object_detection.dart';
import 'package:image/image.dart' as img;
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_tesseract_ocr/flutter_tesseract_ocr.dart';
import 'yolo_detection_service.dart';

class PlateRecognitionService {
  // YOLO service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  final YoloDetectionService _yoloService = YoloDetectionService();

  // Text recognizer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR (backup)
  final TextRecognizer _textRecognizer = TextRecognizer();

  // Object detector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (backup)
  late final ObjectDetector _objectDetector;

  PlateRecognitionService() {
    // Initialize services
    _initialize();

    // Initialize object detector as backup
    final options = ObjectDetectorOptions(
      mode: DetectionMode.single,
      classifyObjects: true,
      multipleObjects: false,
    );
    _objectDetector = ObjectDetector(options: options);
  }

  /// Initialize YOLO service
  Future<void> _initialize() async {
    try {
      await _yoloService.initialize();
      print('‚úÖ YOLO service initialized');
    } catch (e) {
      print('‚ùå Failed to initialize YOLO: $e');
    }
  }

  /// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡πÉ‡∏ä‡πâ YOLO + OCR)
  Future<String?> processImage(XFile imageFile) async {
    try {
      print('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û: ${imageFile.path}');

      // Step 1: ‡πÉ‡∏ä‡πâ YOLO ‡∏´‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      List<Detection> detections =
          await _yoloService.detectLicensePlates(imageFile);

      if (detections.isEmpty) {
        print('‚ùå YOLO ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô - ‡πÉ‡∏ä‡πâ OCR ‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏û');
        // Fallback: ‡∏ñ‡πâ‡∏≤ YOLO ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ OCR ‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏û
        return await _processFullImage(imageFile);
      }

      // Step 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å detection ‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      Detection bestDetection =
          detections.reduce((a, b) => a.confidence > b.confidence ? a : b);

      print('üìç ‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${bestDetection}');

      // Step 3: Crop ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      File? croppedFile =
          await _yoloService.cropDetection(imageFile, bestDetection);

      if (croppedFile == null) {
        print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ crop ‡πÑ‡∏î‡πâ - ‡πÉ‡∏ä‡πâ OCR ‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏û');
        return await _processFullImage(imageFile);
      }

      // Step 4: Preprocess ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà crop ‡πÅ‡∏•‡πâ‡∏ß
      File? processedFile = await _enhanceImageForOCR(croppedFile);

      // Step 5: OCR ‡∏î‡πâ‡∏ß‡∏¢ Tesseract
      String? extractedText = await FlutterTesseractOcr.extractText(
        processedFile?.path ?? croppedFile.path,
        language: 'tha+eng', // ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        args: {
          "psm": "8", // Treat as single line
          "preserve_interword_spaces": "1",
          "tessedit_char_whitelist":
              "‡∏Å‡∏Ç‡∏É‡∏Ñ‡∏Ö‡∏Ü‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏å‡∏ç‡∏é‡∏è‡∏ê‡∏ë‡∏í‡∏ì‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏•‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏¨‡∏≠‡∏Æ0123456789 ",
        },
      );

      print('üìù OCR Result: $extractedText');

      // Step 6: Clean up temp files
      await croppedFile.delete();
      if (processedFile != null) await processedFile.delete();

      // Step 7: ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      String? plateNumber = _extractPlateNumber(extractedText ?? '');

      print('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $plateNumber');
      return plateNumber;
    } catch (e) {
      print('‚ùå Error processing image: $e');
      return null;
    }
  }

  /// Process full image without YOLO (fallback)
  Future<String?> _processFullImage(XFile imageFile) async {
    try {
      // Preprocess ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô OCR
      File? processedFile = await preprocessImage(imageFile);

      String? extractedText = await FlutterTesseractOcr.extractText(
        processedFile?.path ?? imageFile.path,
        language: 'tha+eng',
        args: {
          "psm": "6", // Uniform block of text
          "preserve_interword_spaces": "1",
          "tessedit_char_whitelist":
              "‡∏Å‡∏Ç‡∏É‡∏Ñ‡∏Ö‡∏Ü‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏å‡∏ç‡∏é‡∏è‡∏ê‡∏ë‡∏í‡∏ì‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏•‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏¨‡∏≠‡∏Æ0123456789 ",
        },
      );

      if (processedFile != null) await processedFile.delete();

      return _extractPlateNumber(extractedText ?? '');
    } catch (e) {
      print('‚ùå Error in fallback OCR: $e');
      return null;
    }
  }

  /// Enhance image specifically for OCR
  Future<File?> _enhanceImageForOCR(File imageFile) async {
    try {
      final bytes = await imageFile.readAsBytes();
      img.Image? image = img.decodeImage(bytes);
      if (image == null) return null;

      // Resize if too small
      // Resize if too small
      if (image.width < 300) {
        double scale = 300 / image.width;
        image = img.copyResize(image,
            width: (image.width * scale).round(),
            height: (image.height * scale).round(),
            interpolation: img.Interpolation.cubic);
      }

      // Convert to grayscale
      image = img.grayscale(image);

      // Increase contrast
      image = img.adjustColor(image, contrast: 1.8, brightness: 1.1);

      // Apply slight blur to reduce noise
      image = img.gaussianBlur(image, radius: 1);

      // Sharpen
      // Sharpen
      image = img.convolution(image,
          filter: [0, -1, 0, -1, 5, -1, 0, -1, 0], div: 1, offset: 0);

      // Save enhanced image
      final directory = await getTemporaryDirectory();
      final path =
          '${directory.path}/enhanced_${DateTime.now().millisecondsSinceEpoch}.jpg';
      final enhancedFile = File(path);
      await enhancedFile.writeAsBytes(img.encodeJpg(image, quality: 95));

      return enhancedFile;
    } catch (e) {
      print('‚ùå Error enhancing image: $e');
      return null;
    }
  }

  /// ‡∏Ñ‡∏£‡∏≠‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠)
  Future<File?> cropLicensePlate(XFile imageFile, Rect plateArea) async {
    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û
      final bytes = await imageFile.readAsBytes();
      img.Image? image = img.decodeImage(bytes);

      if (image == null) return null;

      // ‡∏Ñ‡∏£‡∏≠‡∏õ‡∏†‡∏≤‡∏û
      img.Image cropped = img.copyCrop(
        image,
        x: plateArea.left.toInt(),
        y: plateArea.top.toInt(),
        width: plateArea.width.toInt(),
        height: plateArea.height.toInt(),
      );

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏õ
      final directory = await getTemporaryDirectory();
      final path =
          '${directory.path}/cropped_plate_${DateTime.now().millisecondsSinceEpoch}.jpg';
      final croppedFile = File(path);
      await croppedFile.writeAsBytes(img.encodeJpg(cropped));

      return croppedFile;
    } catch (e) {
      print('‚ùå Error cropping image: $e');
      return null;
    }
  }

  /// ‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà OCR ‡πÑ‡∏î‡πâ
  String? _extractPlateNumber(String text) {
    print('üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà OCR ‡πÑ‡∏î‡πâ: $text');

    // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
    String cleanText = text.replaceAll('\n', ' ').trim();

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    cleanText = _keepOnlyThaiAndNumbers(cleanText);
    print('üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á: $cleanText');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    Map<String, String>? plateData = _extractPlateData(cleanText);

    if (plateData != null) {
      String result = plateData['plate']!;

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ñ‡πâ‡∏≤‡∏û‡∏ö
      if (plateData['province'] != null && plateData['province']!.isNotEmpty) {
        result += ' ${plateData['province']}';
      }

      return result;
    }

    return null;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  String _keepOnlyThaiAndNumbers(String text) {
    // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞: ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢ (‡∏Å-‡∏Æ), ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (0-9), ‡πÅ‡∏•‡∏∞ space
    return text
        .replaceAll(RegExp(r'[^‡∏Å-‡∏Æ0-9\s]'), ' ')
        .replaceAll(RegExp(r'\s+'), ' ')
        .trim();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  Map<String, String>? _extractPlateData(String text) {
    // Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    List<RegExp> platePatterns = [
      // ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      RegExp(r'([‡∏Å-‡∏Æ]{1,2})\s*(\d{1,4})'), // ‡∏Å‡∏Ç 1234
      RegExp(r'(\d{1,2})\s*([‡∏Å-‡∏Æ]{1,2})\s*(\d{1,4})'), // 1‡∏Å‡∏Å 9999
      RegExp(r'([‡∏Å-‡∏Æ])\s*(\d{4})'), // ‡∏Å 1234
    ];

    String? plateNumber;
    String? province;

    // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    for (RegExp pattern in platePatterns) {
      final matches = pattern.allMatches(text);
      if (matches.isNotEmpty) {
        plateNumber = matches.first.group(0)?.trim();

        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        if (plateNumber != null) {
          plateNumber = _formatPlateNumber(plateNumber);
        }
        break;
      }
    }

    // ‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    province = _extractProvinceFromText(text);

    if (plateNumber != null) {
      return {
        'plate': plateNumber,
        'province': province ?? '',
      };
    }

    return null;
  }

  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
  String _formatPlateNumber(String plate) {
    // ‡∏•‡∏ö space ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    String clean = plate.replaceAll(' ', '');

    // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    final thaiLetters = RegExp(r'[‡∏Å-‡∏Æ]+');
    final numbers = RegExp(r'\d+');

    // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢
    final letterMatch = thaiLetters.firstMatch(clean);
    if (letterMatch == null) return plate;

    String letters = letterMatch.group(0)!;
    String remaining = clean.substring(letterMatch.end);

    // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    final numberMatch = numbers.firstMatch(remaining);
    if (numberMatch == null) return '$letters $remaining'.trim();

    String firstNumbers = numberMatch.group(0)!;

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 1‡∏Å‡∏Å 9999)
    if (clean.startsWith(RegExp(r'\d'))) {
      final leadingNumber = numbers.firstMatch(clean)?.group(0) ?? '';
      return '$leadingNumber$letters $firstNumbers'.trim();
    }

    // ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏Å‡∏Ç 1234)
    return '$letters $firstNumbers'.trim();
  }

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  String? _extractProvinceFromText(String text) {
    // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 77 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    List<String> provinces = [
      // ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á
      '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£', '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
      '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£',
      '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°',
      '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ',
      '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ',

      // ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
      '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ô‡πà‡∏≤‡∏ô', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡πÅ‡∏û‡∏£‡πà', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô',
      '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå',

      // ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
      '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤',
      '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£',
      '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡πÄ‡∏•‡∏¢', '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå',
      '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç',

      // ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
      '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ï‡∏£‡∏≤‡∏î', '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ',
      '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß',

      // ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å
      '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ï‡∏≤‡∏Å', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',

      // ‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ
      '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏ä‡∏∏‡∏°‡∏û‡∏£', '‡∏ï‡∏£‡∏±‡∏á', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™',
      '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏¢‡∏∞‡∏•‡∏≤',
      '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏™‡∏ï‡∏π‡∏•', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ',
    ];

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß‡πÑ‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä" ‡∏Å‡πà‡∏≠‡∏ô "‡∏ô‡∏Ñ‡∏£")
    provinces.sort((a, b) => b.length.compareTo(a.length));

    String lowerText = text.toLowerCase();

    for (String province in provinces) {
      if (lowerText.contains(province.toLowerCase())) {
        return province;
      }
    }

    return null;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç OCR errors ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
  String _fixCommonOCRErrors(String plate) {
    return plate
        .replaceAll('0', '0')
        .replaceAll('O', '0')
        .replaceAll('o', '0')
        .replaceAll('‡πê', '0')
        .replaceAll('1', '1')
        .replaceAll('I', '1')
        .replaceAll('l', '1')
        .replaceAll('‡πë', '1');
  }

  /// ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  String? _extractProvince(String text) {
    // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    List<String> provinces = [
      '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô',
      '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ',
      '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£',
      '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    ];

    String lowerText = text.toLowerCase();
    for (String province in provinces) {
      if (lowerText.contains(province.toLowerCase())) {
        return province;
      }
    }

    return null;
  }

  /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î resources
  void dispose() {
    _textRecognizer.close();
    _objectDetector.close();
    _yoloService.dispose();
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
  Future<File?> preprocessImage(XFile imageFile) async {
    try {
      final bytes = await imageFile.readAsBytes();
      img.Image? image = img.decodeImage(bytes);

      if (image == null) return null;

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
      image = img.adjustColor(image, contrast: 1.5);

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ (‡∏≠‡∏≤‡∏à‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ OCR ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô)
      image = img.grayscale(image);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
      final directory = await getTemporaryDirectory();
      final path =
          '${directory.path}/processed_${DateTime.now().millisecondsSinceEpoch}.jpg';
      final processedFile = File(path);
      await processedFile.writeAsBytes(img.encodeJpg(image));

      return processedFile;
    } catch (e) {
      print('‚ùå Error preprocessing image: $e');
      return null;
    }
  }

  /// Get detection results (for display/debugging)
  Future<List<Detection>> getDetections(XFile imageFile) async {
    try {
      return await _yoloService.detectLicensePlates(imageFile);
    } catch (e) {
      print('‚ùå Error getting detections: $e');
      return [];
    }
  }
}
