// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:google_mlkit_text_recognition/google_mlkit_text_recognition.dart';
// import 'package:image/image.dart' as img;
// import 'package:image_picker/image_picker.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:flutter_tesseract_ocr/flutter_tesseract_ocr.dart';

// class PlateRecognitionService {
//   // Text recognizers
//   final TextRecognizer _textRecognizer = TextRecognizer();

//   /// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
//   Future<String?> processImage(XFile imageFile) async {
//     try {
//       print('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û: ${imageFile.path}');
      
//       // Method 1: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Google ML Kit ‡∏Å‡πà‡∏≠‡∏ô
//       String? mlKitResult = await _processWithMLKit(imageFile);
//       if (mlKitResult != null) {
//         print('‚úÖ ML Kit ‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: $mlKitResult');
//         return mlKitResult;
//       }
      
//       // Method 2: ‡πÉ‡∏ä‡πâ Tesseract OCR
//       String? tesseractResult = await _processWithTesseract(imageFile);
//       if (tesseractResult != null) {
//         print('‚úÖ Tesseract ‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: $tesseractResult');
//         return tesseractResult;
//       }
      
//       print('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô');
//       return null;
      
//     } catch (e) {
//       print('‚ùå Error processing image: $e');
//       return null;
//     }
//   }
  
//   /// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ Google ML Kit
//   Future<String?> _processWithMLKit(XFile imageFile) async {
//     try {
//       final inputImage = InputImage.fromFilePath(imageFile.path);
      
//       // ‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á default ‡πÅ‡∏•‡∏∞ Thai recognizer
//       final recognizedText = await _textRecognizer.processImage(inputImage);
      
//       // ‡∏£‡∏ß‡∏° text ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
//       String allText = recognizedText.text;
//       print('üìù ML Kit OCR: $allText');
      
//       // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
//       return _extractPlateNumber(allText);
      
//     } catch (e) {
//       print('‚ùå ML Kit error: $e');
//       return null;
//     }
//   }
  
//   /// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ Tesseract OCR
//   Future<String?> _processWithTesseract(XFile imageFile) async {
//     try {
//       // Preprocess image ‡∏Å‡πà‡∏≠‡∏ô
//       File? processedFile = await _preprocessImage(imageFile);
//       String imagePath = processedFile?.path ?? imageFile.path;
      
//       // OCR ‡∏î‡πâ‡∏ß‡∏¢ Tesseract
//       String? extractedText = await FlutterTesseractOcr.extractText(
//         imagePath,
//         language: 'tha+eng',
//         args: {
//           "psm": "6", // Uniform block of text
//           "preserve_interword_spaces": "1",
//           "tessedit_char_whitelist": "‡∏Å‡∏Ç‡∏É‡∏Ñ‡∏Ö‡∏Ü‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏å‡∏ç‡∏é‡∏è‡∏ê‡∏ë‡∏í‡∏ì‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏•‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏¨‡∏≠‡∏Æ0123456789 -",
//         },
//       );
      
//       // Clean up
//       if (processedFile != null) {
//         await processedFile.delete();
//       }
      
//       print('üìù Tesseract OCR: $extractedText');
      
//       // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
//       return _extractPlateNumber(extractedText ?? '');
      
//     } catch (e) {
//       print('‚ùå Tesseract error: $e');
//       return null;
//     }
//   }
  
//   /// Preprocess ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û OCR
//   Future<File?> _preprocessImage(XFile imageFile) async {
//     try {
//       final bytes = await imageFile.readAsBytes();
//       img.Image? image = img.decodeImage(bytes);
//       if (image == null) return null;
      
//       // Resize ‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
//       if (image.width > 1000) {
//         double scale = 1000 / image.width;
//         image = img.copyResize(image, 
//           width: 1000,
//           height: (image.height * scale).round()
//         );
//       }
      
//       // Convert to grayscale
//       image = img.grayscale(image);
      
//       // Increase contrast
//       image = img.adjustColor(image, contrast: 1.5);
      
//       // Save processed image
//       final directory = await getTemporaryDirectory();
//       final path = '${directory.path}/processed_${DateTime.now().millisecondsSinceEpoch}.jpg';
//       final processedFile = File(path);
//       await processedFile.writeAsBytes(img.encodeJpg(image, quality: 95));
      
//       return processedFile;
      
//     } catch (e) {
//       print('‚ùå Error preprocessing image: $e');
//       return null;
//     }
//   }
  
//   /// ‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
//   String? _extractPlateNumber(String text) {
//     if (text.isEmpty) return null;
    
//     // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
//     String cleanText = text
//         .replaceAll('\n', ' ')
//         .replaceAll(RegExp(r'\s+'), ' ')
//         .trim();
    
//     // ‡πÅ‡∏Å‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏ö‡πà‡∏≠‡∏¢
//     cleanText = _fixCommonOCRErrors(cleanText);
    
//     // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
//     cleanText = _keepOnlyThaiAndNumbers(cleanText);
    
//     print('üìù Clean text: $cleanText');
    
//     // Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ó‡∏¢
//     List<RegExp> patterns = [
//       // ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏Å‡∏Ç 1234
//       RegExp(r'([‡∏Å-‡∏Æ]{1,2})\s*(\d{1,4})'),
//       // ‡∏£‡∏ñ‡∏û‡∏¥‡πÄ‡∏®‡∏©: 1‡∏Å‡∏Å 9999
//       RegExp(r'(\d{1,2})\s*([‡∏Å-‡∏Æ]{1,2})\s*(\d{1,4})'),
//       // ‡πÅ‡∏Ñ‡πà‡∏≠‡∏±‡∏Å‡∏©‡∏£: ‡∏Å 1234
//       RegExp(r'([‡∏Å-‡∏Æ])\s*(\d{4})'),
//     ];
    
//     // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ pattern ‡∏ó‡∏µ‡πà match
//     for (RegExp pattern in patterns) {
//       final matches = pattern.allMatches(cleanText);
//       if (matches.isNotEmpty) {
//         String plateNumber = matches.first.group(0)!.trim();
        
//         // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢
//         plateNumber = _formatPlateNumber(plateNumber);
        
//         // ‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
//         String? province = _extractProvince(cleanText);
        
//         // ‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
//         if (province != null) {
//           return '$plateNumber $province';
//         }
        
//         return plateNumber;
//       }
//     }
    
//     return null;
//   }
  
//   /// ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
//   String _keepOnlyThaiAndNumbers(String text) {
//     return text
//         .replaceAll(RegExp(r'[^‡∏Å-‡∏Æ0-9\s]'), ' ')
//         .replaceAll(RegExp(r'\s+'), ' ')
//         .trim();
//   }
  
//   /// ‡πÅ‡∏Å‡πâ OCR errors ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
//   String _fixCommonOCRErrors(String text) {
//     Map<String, String> replacements = {
//       // ‡πÄ‡∏•‡∏Ç‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏≠‡∏≤‡∏£‡∏ö‡∏¥‡∏Å
//       '‡πê': '0', '‡πë': '1', '‡πí': '2', '‡πì': '3', '‡πî': '4',
//       '‡πï': '5', '‡πñ': '6', '‡πó': '7', '‡πò': '8', '‡πô': '9',
//       // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î
//       'O': '0', 'o': '0', 'I': '1', 'l': '1',
//       'Z': '2', 'S': '5', 's': '5', 'G': '6',
//       // ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏™‡∏±‡∏ö‡∏™‡∏ô
//       '‡∏§': '‡∏£', '‡∏¶': '‡∏•',
//     };
    
//     String fixed = text;
//     replacements.forEach((key, value) {
//       fixed = fixed.replaceAll(key, value);
//     });
    
//     return fixed;
//   }
  
//   /// ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
//   String _formatPlateNumber(String plate) {
//     // ‡∏•‡∏ö space ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
//     String clean = plate.replaceAll(' ', '');
    
//     // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
//     final thaiLetters = RegExp(r'[‡∏Å-‡∏Æ]+');
//     final numbers = RegExp(r'\d+');
    
//     // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢
//     final letterMatch = thaiLetters.firstMatch(clean);
//     if (letterMatch == null) return plate;
    
//     String letters = letterMatch.group(0)!;
    
//     // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
//     final numberMatches = numbers.allMatches(clean).toList();
//     if (numberMatches.isEmpty) return letters;
    
//     // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (1‡∏Å‡∏Å 9999)
//     if (clean.startsWith(RegExp(r'\d'))) {
//       String leadingNumber = numberMatches.first.group(0)!;
//       String trailingNumber = numberMatches.length > 1 ? numberMatches[1].group(0)! : '';
//       return '$leadingNumber$letters $trailingNumber'.trim();
//     }
    
//     // ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏Å‡∏Ç 1234)
//     String mainNumber = numberMatches.first.group(0)!;
//     return '$letters $mainNumber';
//   }
  
//   /// ‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
//   String? _extractProvince(String text) {
//     // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
//     List<String> provinces = [
//       // ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á
//       '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£', '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
//       '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£',
//       '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°',
//       '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ',
//       '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ',
      
//       // ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
//       '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ô‡πà‡∏≤‡∏ô', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡πÅ‡∏û‡∏£‡πà', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô',
//       '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå',
      
//       // ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
//       '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤',
//       '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£',
//       '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡πÄ‡∏•‡∏¢', '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå',
//       '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç',
      
//       // ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
//       '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ï‡∏£‡∏≤‡∏î', '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ',
//       '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß',
      
//       // ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å
//       '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ï‡∏≤‡∏Å', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
      
//       // ‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ
//       '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏ä‡∏∏‡∏°‡∏û‡∏£', '‡∏ï‡∏£‡∏±‡∏á', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™',
//       '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏¢‡∏∞‡∏•‡∏≤',
//       '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏™‡∏ï‡∏π‡∏•', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ',
//     ];
    
//     // ‡∏Ñ‡∏≥‡∏¢‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
//     Map<String, String> abbreviations = {
//       '‡∏Å‡∏ó‡∏°': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
//       '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä': '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', 
//       '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ': '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä',
//       '‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤': '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤',
//     };
    
//     String lowerText = text.toLowerCase();
    
//     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏¢‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
//     for (var entry in abbreviations.entries) {
//       if (lowerText.contains(entry.key.toLowerCase())) {
//         return entry.value;
//       }
//     }
    
//     // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß‡πÑ‡∏õ‡∏™‡∏±‡πâ‡∏ô
//     provinces.sort((a, b) => b.length.compareTo(a.length));
    
//     // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
//     for (String province in provinces) {
//       if (lowerText.contains(province.toLowerCase())) {
//         return province;
//       }
//     }
    
//     return null;
//   }
  
//   /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î resources
//   void dispose() {
//     _textRecognizer.close();
//   }
// }